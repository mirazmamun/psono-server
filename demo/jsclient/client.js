
var client = {

    backend: 'https://dev.sanso.pw',

    /**
     * takes the sha512 of lowercase email as salt to generate scrypt password hash in hex called the authkey
     *
     * For compatibility reasons with other clients please use the following parameters if you create your own client:
     *
     * var n = 16384;
     * var r = 8;
     * var p = 1;
     * var l = 64;
     *
     * @param {string} email - email address of the user
     * @param {string} password - password of the user
     * @returns auth_key - scrypt hex value of the password with the sha512 of lowercase email as salt
     */
    generate_authkey: function (email, password) {

        var n = 16384;
        var r = 8;
        var p = 1;
        var l = 64; // 64 Bytes = 512 Bits

        var scrypt = scrypt_module_factory();

        // takes the email address basically as salt. sha512 is used to enforce minimum length
        var salt = CryptoJS.SHA512(email.toLowerCase());

        return scrypt.to_hex(scrypt.crypto_scrypt(scrypt.encode_utf8(password), scrypt.encode_utf8(salt), n, r, p, l));
    },
    /**
     * Ajax POST request to the backend with the email and authkey, returns nothing but an email is sent to the user
     * with an activation_code for the email
     *
     * @param {string} email - email address of the user
     * @param {string} authkey - authkey gets generated by generate_authkey(email, password)
     * @returns {*}
     */
    authentication_register: function(email, authkey) {
        var endpoint = '/authentication/register/';
        var type = "POST";
        var data = {
            email: email,
            authkey: authkey
        };

        return $.ajax({
          type: type,
          url: this.backend+endpoint,
          data: data,
          dataType: 'text' // will be json but for demonstration purposes we insist on text
        });
    },
    /**
     * Ajax POST request to the backend with the activation_code for the email, returns nothing. If successful the user
     * can login afterwards
     *
     * @param activation_code
     * @returns {*}
     */
    authentication_verify_email: function(activation_code) {
        var endpoint = '/authentication/verify-email/';
        var type = "POST";
        var data = {
            activation_code: activation_code
        };

        return $.ajax({
          type: type,
          url: this.backend+endpoint,
          data: data,
          dataType: 'text' // will be json but for demonstration purposes we insist on text
        });
    },
    /**
     * Ajax POST request to the backend with email and authkey for login, returns the token for further authentication
     *
     * @param {string} email - email address of the user
     * @param {string} authkey - authkey gets generated by generate_authkey(email, password)
     * @returns {*}
     */
    authentication_login: function(email, authkey) {
        var endpoint = '/authentication/login/';
        var type = "POST";
        var data = {
            email: email,
            authkey: authkey
        };

        return $.ajax({
          type: type,
          url: this.backend+endpoint,
          data: data,
          dataType: 'text' // will be json but for demonstration purposes we insist on text
        });
    }
};


